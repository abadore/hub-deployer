#!/usr/bin/env ruby
require 'trollop'
require 'fog'
$stdout.sync = true

opts = Trollop::options do
  opt :aws_access_key_id, "AWS Access Key ID", :type => :string, :required => true
  opt :aws_secret_access_key, "AWS Secret Key", :type => :string, :required => true
  opt :aws_region, "AWS Region", :type => :string, :default => "us-west-1"
  opt :stack_name, "CloudFormation Stack Name", :type => :string, :required => true
  opt :cf_template, "CloudFormation Template", :type => :io, :required => true
  opt :parameters, "CF Template Parameters (comma delimited name=value pairs)", :type => :string
  opt :delete_first, "Delete Prior Stack", :type => :flag
  opt :update, "Update Stack", :type => :flag
  opt :disable_rollback, "Disable Rollback", :type => :flag
end

params = {}
if opts[:parameters]
  opts[:parameters].split(",").each do |param|
    pair = param.split("=")
    if pair.length == 2
      params[pair[0]] = pair[1]
    end
  end
end

template = ""
while (line = opts[:cf_template].gets)
  template += line
end
opts[:cf_template].close()

cf = Fog::AWS::CloudFormation.new(
                                  :region                 => opts[:aws_region],
                                  :aws_access_key_id      => opts[:aws_access_key_id],
                                  :aws_secret_access_key  => opts[:aws_secret_access_key]
                                  )


def poll_events cf, stack_name, status_list
  event_polling = true
  count = 0

  while event_polling
    begin
      response = cf.describe_stack_events(stack_name)
      events = response.body['StackEvents']

      i = events.length - count
      count = events.length

      while i > 0
        i -= 1
        print_event events[i]
        if events[i]["ResourceType"] == "AWS::CloudFormation::Stack" && status_list.index(events[i]["ResourceStatus"])
          event_polling = false
          if %w(ROLLBACK_COMPLETE CREATE_FAILED).index(events[i]["ResourceStatus"])
            raise "Stack creation failed."
          end
        end
      end

      sleep(2)
      putc '.'
    rescue => e
      if e.response.nil? || e.response.status != 400
        raise e
      else
        puts "Stack deleted"
        event_polling = false
      end
    end
  end
end

def stack_exists cf, stack_name
  begin
    cf.describe_stacks({"StackName" => stack_name})
    true
  rescue => e
    if e.response.nil? || e.response.status != 400
      raise e
    end
    false
  end
end

def print_event event
  puts ""
  puts "#{event['Timestamp']} - Type: #{event["ResourceType"]},  Status: #{event["ResourceStatus"]},   Name: #{event["LogicalResourceId"]}"
end

def create_stack cf, stack_name, template, params, disable_rollback

  puts "Creating stack #{stack_name}"
  cf.create_stack(stack_name,
                  {
                      "TemplateBody" => template,
                      "Parameters" => params,
                      "Capabilities" => "CAPABILITY_IAM",
                      "DisableRollback" => disable_rollback
                  }
  )

  poll_events cf, stack_name, %w(CREATE_COMPLETE ROLLBACK_COMPLETE CREATE_FAILED)

end

exists = stack_exists cf, opts[:stack_name]

if opts[:delete_first] && exists
  puts "Deleting existing stack"
  cf.delete_stack(opts[:stack_name])
  poll_events cf, opts[:stack_name], %w(DELETE_COMPLETE DELETE_FAILED)
  create_stack cf, opts[:stack_name], template, params, opts[:disable_rollback]

elsif exists && opts[:update]
  puts "Updating stack #{opts[:stack_name]}"
  cf.update_stack(opts[:stack_name],
                  {
                      "TemplateBody" => template,
                      "Parameters" => params,
                      "Capabilities" => "CAPABILITY_IAM"
                  }
  )
  poll_events cf, opts[:stack_name], %w(UPDATE_COMPLETE UPDATE_FAILED)

elsif exists
  abort "Cannot create #{opts[:stack_name]} stack when one already exists. Try providing --delete-first flag or different stack name."
else
  create_stack cf, opts[:stack_name], template, params, opts[:disable_rollback]
end

