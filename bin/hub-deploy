#!/usr/bin/env ruby
require 'trollop'
require 'hub-deployer'
require 'colored'
require 'fog'

$stdout.sync = true


base_tasks = <<-'EOS'

    # Symfony application path
    set :app_path,              "app"

    # Symfony web path
    set :web_path,              "web"

    # Symfony log path
    set :log_path,              app_path + "/logs"

    # Symfony cache path
    set :cache_path,            app_path + "/cache"

    # Dirs that need to remain the same between deploys (shared dirs)
    set :shared_children,       [log_path, web_path + "/uploads"]

    # Files that need to remain the same between deploys
    set :shared_files,          false

    set :asset_children,        []

    namespace :deploy do
      desc <<-DESC
        Prepares one or more servers for deployment. Before you can use any \
        of the Capistrano deployment tasks with your project, you will need to \
        make sure all of your servers have been prepared with `cap deploy:setup'. When \
        you add a new server to your cluster, you can easily run the setup task \
        on just that server by specifying the HOSTS environment variable:

          $ cap HOSTS=new.server.com deploy:setup

        It is safe to run this task on servers that have already been set up; it \
        will not destroy any deployed revisions or data.
      DESC
      task :setup, :roles => :app, :except => { :no_release => true } do
        dirs = [deploy_to, releases_path, shared_path]
        run "#{try_sudo} mkdir -p #{dirs.join(' ')}"
        run "#{try_sudo} chmod g+w #{dirs.join(' ')}" if fetch(:group_writable, true)

        if :use_sudo
          run "sudo chown #{user}:#{user} #{dirs.join(' ')}"
        end
      end

      desc "Symlinks static directories and static files that need to remain between deployments"
      task :share_childs, :roles => :app, :except => { :no_release => true } do
        if shared_children
          logger.important "--> Creating symlinks for shared directories"

          shared_children.each do |link|
            run "mkdir -p #{shared_path}/#{link}"
            run "sh -c 'if [ -d #{release_path}/#{link} ] ; then rm -rf #{release_path}/#{link}; fi'"
            run "ln -nfs #{shared_path}/#{link} #{release_path}/#{link}"
          end

        end

        if shared_files
          logger.important "--> Creating symlinks for shared files"

          shared_files.each do |link|
            link_dir = File.dirname("#{shared_path}/#{link}")
            run "mkdir -p #{link_dir}"
            run "touch #{shared_path}/#{link}"
            run "ln -nfs #{shared_path}/#{link} #{release_path}/#{link}"
          end

        end
      end

      desc "Updates latest release source path"
      task :finalize_update, :roles => :app, :except => { :no_release => true } do
        run "chmod -R g+w #{latest_release}" if fetch(:group_writable, true)

        logger.important "--> Creating cache directory"

        run "sh -c 'if [ -d #{latest_release}/#{cache_path} ] ; then rm -rf #{latest_release}/#{cache_path}; fi'"
        run "sh -c 'mkdir -p #{latest_release}/#{cache_path} && chmod -R 0777 #{latest_release}/#{cache_path}'"
        run "chmod -R g+w #{latest_release}/#{cache_path}"

        share_childs

        if fetch(:normalize_asset_timestamps, true)
          stamp = Time.now.utc.strftime("%Y%m%d%H%M.%S")
          asset_paths = asset_children.map { |p| "#{latest_release}/#{p}" }.join(" ")

          if asset_paths.chomp.empty?
            puts "    No asset paths found, skipped".yellow
          else
            logger.important "--> Normalizing asset timestamps"

            run "find #{asset_paths} -exec touch -t #{stamp} {} ';' &> /dev/null || true", :env => { "TZ" => "UTC" }
          end
        end
      end

    end

    # set Net::SSH ssh options through normal variables
    # at the moment only one SSH key is supported as arrays are not
    # parsed correctly by Webistrano::Deployer.type_cast (they end up as strings)
    [:ssh_port, :ssh_keys].each do |ssh_opt|
      if exists? ssh_opt
        logger.important("SSH options: setting #{ssh_opt} to: #{fetch(ssh_opt)}")
        ssh_options[ssh_opt.to_s.gsub(/ssh_/, '').to_sym] = fetch(ssh_opt)
      end
    end

EOS

tasks = <<-'EOS'
    load 'deploy' if respond_to?(:namespace) # cap2 differentiator
    #load Gem.find_files('symfony2.rb').first.to_s

EOS

tasks += base_tasks
remote_tasks = base_tasks

opts = Trollop::options do
  opt :actions, "Actions to perform", :type => :string, :default => "deploy"
  opt :app_servers, "Servers to deploy to", :type => :string
  opt :application, "Name of application", :type => :string, :default => "hub"
  opt :deploy_to, "Deploy directory", :type => :string, :default => "/web/hub"
  opt :symfony_env_prod, "Symfony environment to deploy", :type => :string, :default => "prod"
  opt :user, "Remote user", :type => :string, :default => "ec2-user"
  opt :password, "Remote user password", :type => :string
  opt :ssh_keys, "Remote user SSH key file", :type => :string
  opt :keep_releases, "Number of releases to keep", :type => :int, :default => 3
  opt :php_bin, "PHP binary", :type => :string, :default => "php"
  opt :deploy_via, "Capistrano deploy method", :type => :string, :default => ":copy"
  opt :scm, "SCM type", :type => :string, :default => ":git"
  opt :repository, "SCM repository location", :type => :string
  opt :branch, "SCM branch/tag", :type => :string
  opt :use_sudo, "Use sudo", :type => :flag
  opt :tasks, "Tasks file", :type => :io
  opt :remote_tasks, "Tasks file to run on remotes, use with build_local", :type => :io
  opt :gem_tasks, "Internal tasks file", :type => :string
  opt :use_scp, "Use scp instead of sftp", :type => :flag
  opt :build_local, "Build local then copy to remotes", :type => :flag
  opt :local_user, "Remote user", :type => :string, :default => "ec2-user"
  opt :local_actions, "Local actions to perform", :type => :string, :default => "deploy"
  opt :local_password, "Remote user password", :type => :string
  opt :local_ssh_keys, "Remote user SSH key file", :type => :string
  opt :local_deploy_to, "Local deploy directory", :type => :string, :default => "/web/hub"
  opt :ec2_tag, "Deploy to EC2 instances with this tag (tag_name=tag_value)", :type => :string
  opt :ec2_region, "EC2 Region where instances are located", :type => :string, :default => "us-east-1"
  opt :aws_access_key_id, "AWS Access Key ID", :type => :string
  opt :aws_secret_access_key, "AWS Secret Key", :type => :string
end

vars = {}

opts.each do |k,v|
  if !v.nil? and !k.to_s.include? "_given" and k != :help
    puts "#{k} => #{v}"
    if k == :tasks
      while (line = v.gets)
        tasks += line
      end
      v.close()

    elsif k == :remote_tasks
      while (line = v.gets)
        remote_tasks += line
      end
      v.close()

    elsif k == :gem_tasks
      path = File.dirname(__FILE__) + "/../tasks/"
      if File.exist? path + v
        task_file = File.new(path + v, "r")
        while (line = task_file.gets)
          tasks += line
        end
        task_file.close()
      else
        puts "Tasks file #{v} does not exists. Available tasks files are:".red
        Dir.glob(path + "*").each do |file|
          puts "    #{file[/[^\/]*$/]}".red
        end
        abort "exiting".red
      end

    else
      vars[k] = (v.is_a? String) ? v.dup : v.to_s
    end

  end
end

app_servers = []
if opts[:ec2_tag] && opts[:aws_access_key_id] && opts[:aws_secret_access_key]
  aws = Fog::Compute::AWS.new(
     :region => opts[:ec2_region],
     :aws_access_key_id => opts[:aws_access_key_id],
     :aws_secret_access_key => opts[:aws_secret_access_key]
  )

  tag = opts[:ec2_tag].split "="
  if tag.size == 2
    servers = aws.servers.all("tag:#{tag[0]}" => tag[1])
    puts servers
    servers.each do |server|
      puts "found instance #{server.id}"
      app_servers.push server.private_ip_address
    end
  end

else
  app_servers = opts[:app_servers].split(',')

end

if :app_servers.size == 0
  abort "Please provide a list of app servers to deploy to. Use the --app-servers parameter.".red
end

  roles_options = {
}

if opts[:use_scp]
  Capistrano::Configuration.send(:include, UseScpForDeployment)
end

def generate_roles servers
  roles = []
  servers.each do |host|
    roles.push(
        {
            :name => :app,
            :host => host
        }
    )
  end
  roles
end

def execute! actions, tasks, roles, roles_options, vars

  puts "   ###>>>>>>>>>>>>>> TASKS <<<<<<<<<<<<<<<<###    \n\n".green
  puts tasks.green

  deployer = Symfony::Deployer.new
  deployer.tasks = tasks
  deployer.roles = roles
  deployer.roles_options = roles_options
  deployer.vars = vars
  deployer.options[:actions] = actions
  deployer.execute!
  deployer.config.latest_release
end

def replace hash, key, value
  hash.delete key
  if value
    hash[key] = (value.is_a? String) ? value.dup : value.to_s
  end
end

if opts[:build_local]
  local_vars = vars.dup

  replace local_vars, :user, opts[:local_user]
  replace local_vars, :password, opts[:local_password]
  replace local_vars, :ssh_keys, opts[:local_ssh_keys]
  replace local_vars, :deploy_to, opts[:local_deploy_to]


  release_dir = execute! opts[:local_actions].split(','), tasks, generate_roles(%w(localhost)), roles_options, local_vars

  replace vars, :repository, release_dir
  replace vars, :scm, :none
  replace vars, :deploy_via, :copy

  execute! opts[:actions].split(','), remote_tasks, generate_roles(app_servers), roles_options, vars
else
  execute! opts[:actions].split(','), tasks, generate_roles(app_servers), roles_options, vars
end
