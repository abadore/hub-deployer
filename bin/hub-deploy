#!/usr/bin/env ruby
require 'trollop'
require 'hub-deployer'
require 'colored'

$stdout.sync = true


ssh_tasks = <<-'EOS'

    namespace :deploy do
      desc <<-DESC
        Prepares one or more servers for deployment. Before you can use any \
        of the Capistrano deployment tasks with your project, you will need to \
        make sure all of your servers have been prepared with `cap deploy:setup'. When \
        you add a new server to your cluster, you can easily run the setup task \
        on just that server by specifying the HOSTS environment variable:

          $ cap HOSTS=new.server.com deploy:setup

        It is safe to run this task on servers that have already been set up; it \
        will not destroy any deployed revisions or data.
      DESC
      task :setup, :roles => :app, :except => { :no_release => true } do
        dirs = [deploy_to, releases_path, shared_path]
        run "sudo mkdir -p #{dirs.join(' ')}"
        run "sudo chmod g+w #{dirs.join(' ')}" if fetch(:group_writable, true)
        run "sudo chown #{user}:#{user} #{dirs.join(' ')}"
      end
    end

    # set Net::SSH ssh options through normal variables
    # at the moment only one SSH key is supported as arrays are not
    # parsed correctly by Webistrano::Deployer.type_cast (they end up as strings)
    [:ssh_port, :ssh_keys].each do |ssh_opt|
      if exists? ssh_opt
        logger.important("SSH options: setting #{ssh_opt} to: #{fetch(ssh_opt)}")
        ssh_options[ssh_opt.to_s.gsub(/ssh_/, '').to_sym] = fetch(ssh_opt)
      end
    end

EOS

tasks = <<-'EOS'
    load 'deploy' if respond_to?(:namespace) # cap2 differentiator
    #load Gem.find_files('symfony2.rb').first.to_s

EOS

tasks += ssh_tasks
remote_tasks = ssh_tasks

opts = Trollop::options do
  opt :actions, "Actions to perform", :type => :string, :default => "deploy"
  opt :app_servers, "Servers to deploy to", :type => :string
  opt :application, "Name of application", :type => :string, :default => "hub"
  opt :deploy_to, "Deploy directory", :type => :string, :default => "/web/hub"
  opt :symfony_env_prod, "Symfony environment to deploy", :type => :string, :default => "prod"
  opt :user, "Remote user", :type => :string, :default => "ec2-user"
  opt :password, "Remote user password", :type => :string
  opt :ssh_keys, "Remote user SSH key file", :type => :string
  opt :keep_releases, "Number of releases to keep", :type => :int, :default => 3
  opt :php_bin, "PHP binary", :type => :string, :default => "php"
  opt :deploy_via, "Capistrano deploy method", :type => :string, :default => ":copy"
  opt :scm, "SCM type", :type => :string, :default => ":git"
  opt :repository, "SCM repository location", :type => :string
  opt :branch, "SCM branch/tag", :type => :string
  opt :use_sudo, "Use sudo", :type => :flag
  opt :tasks, "Tasks file", :type => :io
  opt :remote_tasks, "Tasks file to run on remotes, use with build_local", :type => :io
  opt :gem_tasks, "Internal tasks file", :type => :string
  opt :use_scp, "Use scp instead of sftp", :type => :flag
  opt :build_local, "Build local then copy to remotes", :type => :flag
  opt :local_user, "Remote user", :type => :string, :default => "ec2-user"
  opt :local_actions, "Local actions to perform", :type => :string, :default => "deploy"
  opt :local_password, "Remote user password", :type => :string
  opt :local_ssh_keys, "Remote user SSH key file", :type => :string
  opt :local_deploy_to, "Local deploy directory", :type => :string, :default => "/web/hub"
end

vars = {}

opts.each do |k,v|
  if !v.nil? and !k.to_s.include? "_given" and k != :help
    puts "#{k} => #{v}"
    if k == :tasks
      while (line = v.gets)
        tasks += line
      end
      v.close()

    elsif k == :remote_tasks
      while (line = v.gets)
        remote_tasks += line
      end
      v.close()

    elsif k == :gem_tasks
      path = File.dirname(__FILE__) + "/../tasks/"
      if File.exist? path + v
        task_file = File.new(path + v, "r")
        while (line = task_file.gets)
          tasks += line
        end
        task_file.close()
      else
        puts "Tasks file #{v} does not exists. Available tasks files are:".red
        Dir.glob(path + "*").each do |file|
          puts "    #{file[/[^\/]*$/]}".red
        end
        abort "exiting".red
      end

    else
      vars[k] = (v.is_a? String) ? v.dup : v.to_s
    end

  end
end

app_servers = opts[:app_servers].split(',')

roles_options = {
}

if opts[:use_scp]
  Capistrano::Configuration.send(:include, UseScpForDeployment)
end

def generate_roles servers
  roles = []
  servers.each do |host|
    roles.push(
        {
            :name => :app,
            :host => host
        }
    )
  end
  roles
end

def execute! actions, tasks, roles, roles_options, vars

  puts "   ###>>>>>>>>>>>>>> TASKS <<<<<<<<<<<<<<<<###    \n\n".green
  puts tasks.green

  deployer = Symfony::Deployer.new
  deployer.tasks = tasks
  deployer.roles = roles
  deployer.roles_options = roles_options
  deployer.vars = vars
  deployer.options[:actions] = actions
  deployer.execute!
  deployer.config.latest_release
end

def replace hash, key, value
  hash.delete key
  if value
    hash[key] = (value.is_a? String) ? value.dup : value.to_s
  end
end

if opts[:build_local]
  local_vars = vars.dup

  replace local_vars, :user, opts[:local_user]
  replace local_vars, :password, opts[:local_password]
  replace local_vars, :ssh_keys, opts[:local_ssh_keys]
  replace local_vars, :deploy_to, opts[:local_deploy_to]


  release_dir = execute! opts[:local_actions].split(','), tasks, generate_roles(%w(localhost)), roles_options, local_vars

  replace vars, :repository, release_dir
  replace vars, :scm, :none

  execute! opts[:actions].split(','), remote_tasks, generate_roles(app_servers), roles_options, vars
else
  execute! opts[:actions].split(','), tasks, generate_roles(app_servers), roles_options, vars
end
